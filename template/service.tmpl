// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------

{{$service := .Data.Service}}
{{$subService := index .Data.SubServices "Bucket"}}

// Package service provides {{$service.Name}} Service API (API Version {{$service.APIVersion}})
package service

import (
    "net/http"

    "github.com/yunify/qingstor-sdk-go/v3/config"
    "github.com/yunify/qingstor-sdk-go/v3/request"
    "github.com/yunify/qingstor-sdk-go/v3/request/data"
)

var _ http.Header

// {{ $service.Name }}Interface composes all service and sub service interfaces.
type {{ $service.Name }}Interface interface {
    {{ $service.Name }}ServiceInterface
    {{range $_, $sub := .Data.SubServices}}
    {{ $sub.Name }}Interface
    {{end}}
}

// {{ $service.Name }}ServiceInterface is the method set for {{ $service.Name }} service.
type {{ $service.Name }}ServiceInterface interface {
    {{- if ne $subService.Name "Object" }}
        // {{$subService.ID | camelCase}} initializes a new {{$subService.ID | snakeCase}}.
        {{$subService.ID | camelCase}}(
            {{- template "SubServiceInitParams" passThrough $subService.Properties true -}}
            ) (*{{$subService.ID | camelCase}}, error)
    {{- end }}
    {{range $_, $operation := $service.Operations}}
        {{template "RenderOperationInterface" passThrough $service $operation}}
    {{end}}
}

{{if $service.Description}}// Service {{$service.Description}}{{end}}
type Service struct {
    Config *config.Config
}

// Init initializes a new service.
func Init(c *config.Config) (*Service, error) {
    return &Service{Config: c}, nil
}

{{range $_, $operation := $service.Operations}}
    {{template "RenderOperation" passThrough $service $operation}}
{{end}}
